// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FONTS_FONTS_FLATBUF_H_
#define FLATBUFFERS_GENERATED_FONTS_FONTS_FLATBUF_H_

#include "flatbuffers/flatbuffers.h"

namespace Fonts {
namespace flatbuf {

struct Font;

struct Family;

struct Library;

struct Font FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_NAME = 6
  };
  const flatbuffers::String *id() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           verifier.EndTable();
  }
};

struct FontBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(flatbuffers::Offset<flatbuffers::String> id) {
    fbb_.AddOffset(Font::VT_ID, id);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Font::VT_NAME, name);
  }
  explicit FontBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FontBuilder &operator=(const FontBuilder &);
  flatbuffers::Offset<Font> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Font>(end);
    return o;
  }
};

inline flatbuffers::Offset<Font> CreateFont(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> id = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0) {
  FontBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<Font> CreateFontDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *name = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return Fonts::flatbuf::CreateFont(
      _fbb,
      id__,
      name__);
}

struct Family FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SLUG = 4,
    VT_NAME = 6,
    VT_FONTS = 8
  };
  const flatbuffers::String *slug() const {
    return GetPointer<const flatbuffers::String *>(VT_SLUG);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::Vector<flatbuffers::Offset<Font>> *fonts() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Font>> *>(VT_FONTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SLUG) &&
           verifier.VerifyString(slug()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_FONTS) &&
           verifier.VerifyVector(fonts()) &&
           verifier.VerifyVectorOfTables(fonts()) &&
           verifier.EndTable();
  }
};

struct FamilyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_slug(flatbuffers::Offset<flatbuffers::String> slug) {
    fbb_.AddOffset(Family::VT_SLUG, slug);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Family::VT_NAME, name);
  }
  void add_fonts(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Font>>> fonts) {
    fbb_.AddOffset(Family::VT_FONTS, fonts);
  }
  explicit FamilyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FamilyBuilder &operator=(const FamilyBuilder &);
  flatbuffers::Offset<Family> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Family>(end);
    return o;
  }
};

inline flatbuffers::Offset<Family> CreateFamily(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> slug = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Font>>> fonts = 0) {
  FamilyBuilder builder_(_fbb);
  builder_.add_fonts(fonts);
  builder_.add_name(name);
  builder_.add_slug(slug);
  return builder_.Finish();
}

inline flatbuffers::Offset<Family> CreateFamilyDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *slug = nullptr,
    const char *name = nullptr,
    const std::vector<flatbuffers::Offset<Font>> *fonts = nullptr) {
  auto slug__ = slug ? _fbb.CreateString(slug) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto fonts__ = fonts ? _fbb.CreateVector<flatbuffers::Offset<Font>>(*fonts) : 0;
  return Fonts::flatbuf::CreateFamily(
      _fbb,
      slug__,
      name__,
      fonts__);
}

struct Library FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_FAMILIES = 6
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::Vector<flatbuffers::Offset<Family>> *families() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Family>> *>(VT_FAMILIES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_FAMILIES) &&
           verifier.VerifyVector(families()) &&
           verifier.VerifyVectorOfTables(families()) &&
           verifier.EndTable();
  }
};

struct LibraryBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Library::VT_NAME, name);
  }
  void add_families(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Family>>> families) {
    fbb_.AddOffset(Library::VT_FAMILIES, families);
  }
  explicit LibraryBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LibraryBuilder &operator=(const LibraryBuilder &);
  flatbuffers::Offset<Library> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Library>(end);
    return o;
  }
};

inline flatbuffers::Offset<Library> CreateLibrary(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Family>>> families = 0) {
  LibraryBuilder builder_(_fbb);
  builder_.add_families(families);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<Library> CreateLibraryDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const std::vector<flatbuffers::Offset<Family>> *families = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto families__ = families ? _fbb.CreateVector<flatbuffers::Offset<Family>>(*families) : 0;
  return Fonts::flatbuf::CreateLibrary(
      _fbb,
      name__,
      families__);
}

inline const Fonts::flatbuf::Library *GetLibrary(const void *buf) {
  return flatbuffers::GetRoot<Fonts::flatbuf::Library>(buf);
}

inline const Fonts::flatbuf::Library *GetSizePrefixedLibrary(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Fonts::flatbuf::Library>(buf);
}

inline bool VerifyLibraryBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Fonts::flatbuf::Library>(nullptr);
}

inline bool VerifySizePrefixedLibraryBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Fonts::flatbuf::Library>(nullptr);
}

inline void FinishLibraryBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Fonts::flatbuf::Library> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedLibraryBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Fonts::flatbuf::Library> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace flatbuf
}  // namespace Fonts

#endif  // FLATBUFFERS_GENERATED_FONTS_FONTS_FLATBUF_H_
